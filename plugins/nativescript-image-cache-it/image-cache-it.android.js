"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common = require("./image-cache-it.common");
var fs = require("file-system");
var utils = require("utils/utils");
var imageSrc = require("image-source");
global.moduleMerge(common, exports);
var ImageCacheIt = (function (_super) {
    __extends(ImageCacheIt, _super);
    function ImageCacheIt() {
        return _super.call(this) || this;
    }
    Object.defineProperty(ImageCacheIt.prototype, "android", {
        get: function () {
            return this.nativeView;
        },
        enumerable: true,
        configurable: true
    });
    ImageCacheIt.prototype.createNativeView = function () {
        this.picasso = com.squareup.picasso.Picasso.with(this._context);
        return new android.widget.ImageView(this._context);
    };
    ImageCacheIt.prototype.initNativeView = function () {
        this.builder = this.picasso.load(this.getImage(this.imageUri));
        if (this.placeHolder) {
            this.builder.placeholder(imageSrc.fromFileOrResource(this.placeHolder).android);
        }
        if (this.errorHolder) {
            this.builder.error(imageSrc.fromFileOrResource(this.errorHolder).android);
        }
        if (this.resize && this.resize !== undefined && this.resize.split(' ').length > 1) {
            this.builder.resize(parseInt(this.resize.split(' ')[0]), parseInt(this.resize.split(' ')[1]));
        }
        else if (this.override && this.override !== undefined && this.override.split(' ').length > 1) {
            this.builder.resize(parseInt(this.override.split(' ')[0]), parseInt(this.override.split(' ')[1]));
        }
        if (this.centerCrop) {
            this.builder.centerCrop();
        }
        this.builder.into(this.nativeView);
    };
    ImageCacheIt.prototype[common.imageUriProperty.getDefault] = function () {
        return undefined;
    };
    ImageCacheIt.prototype[common.imageUriProperty.setNative] = function (src) {
        if (!this.builder) {
            return;
        }
        this.builder = this.picasso.load(this.getImage(this.imageUri));
        this.builder.into(this.nativeView);
    };
    ImageCacheIt.prototype[common.resizeProperty.setNative] = function (resize) {
        if (!this.builder) {
            return;
        }
        if (resize && resize !== undefined && resize.split(' ').length > 1) {
            this.builder.resize(parseInt(resize.split(' ')[0]), parseInt(resize.split(' ')[1]));
        }
    };
    ImageCacheIt.prototype[common.overrideProperty.setNative] = function (override) {
        if (!this.builder) {
            return;
        }
        if (override && override !== undefined && override.split(' ').length > 1) {
            this.builder.resize(parseInt(override.split(' ')[0]), parseInt(override.split(' ')[1]));
        }
    };
    ImageCacheIt.prototype.getImage = function (src) {
        var nativeImage;
        if (!src) {
            return;
        }
        if (src.substr(0, 1) === '/') {
            nativeImage = new java.io.File(nativeImage);
        }
        else if (src.startsWith("~/")) {
            nativeImage = new java.io.File(fs.path.join(fs.knownFolders.currentApp().path, src.replace("~/", "")));
        }
        else if (src.startsWith("https://") || src.startsWith("http://")) {
            nativeImage = src;
        }
        else if (src.startsWith('res://')) {
            nativeImage = utils.ad.resources.getDrawableId(src.replace('res://', ''));
        }
        return nativeImage;
    };
    ImageCacheIt.prototype[common.stretchProperty.getDefault] = function () {
        return "aspectFit";
    };
    ImageCacheIt.prototype[common.stretchProperty.setNative] = function (value) {
        switch (value) {
            case 'aspectFit':
                this.nativeView.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);
                break;
            case 'aspectFill':
                this.nativeView.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
                break;
            case 'fill':
                this.nativeView.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
                break;
            case 'none':
            default:
                this.nativeView.setScaleType(android.widget.ImageView.ScaleType.MATRIX);
                break;
        }
    };
    ImageCacheIt.prototype.clearItem = function () {
        // this.builder.
    };
    return ImageCacheIt;
}(common.ImageCacheIt));
exports.ImageCacheIt = ImageCacheIt;
//# sourceMappingURL=data:application/json;base64,